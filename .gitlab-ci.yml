image: python:latest

# Install postgreSQL service on container
services:
    - postgres:12.2-alpine

# Change pip's cache directory to be inside the project directory
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DJANGO_SETTINGS_MODULE: "my_app.settings"
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  POSTGRES_HOST_AUTH_METHOD: trust

# Let's cache also the packages
# Install packages in a virtualenv and cache it as well
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - pip install virtualenv --upgrade pip
  - virtualenv venv
  - source venv/bin/activate
  - apt-get update
  #- apt-get install -y postgresql postgresql-client libpq-dev # postgre db requirements

stages:          # List of stages for jobs, and their order of execution
  - build
  - verify
  - unit_test
  - integration_test
  - package
  - release
  - deploy

build:
  stage: build
  script: 
    - pip install --no-cache-dir -r requirements.txt
    - echo "Build stage finished"

verify:
  stage: verify
  script:
    - prospector -X ./my_app  # static code analysis
    - bandit -r ./my_app     # static code analysis pt. 2
    - echo "Verify stage finished"

unit_test:
  stage: unit_test
  script:
    - echo "Running unit_test 1"
    - pytest ./my_app/unit_test.py #running unit_test    
    - echo "Creating db"
    - apt-get install -y postgresql postgresql-client libpq-dev # postgre db
    - psql -U postgres
    - psql -d "CREATE USER $POSTGRES_USER WITH PASSWORD $POSTGRES_PASSWORD CREATEDB;"
    - psql -d "CREATE DATABASE $POSTGRES_DB OWNER $POSTGRES_USER;"
    - echo "Unit testing stage finished"









# breakingBad job:
#   image: python:3.9.7
#   rules:
#     - if: $CI_PIPELINE != "schedule"
#   script: 
#     - python --version

# run tests:
#   image: $CI_REGISTRY_IMAGE
#   script:
#     - echo "hello world"
  
# build image:
#   image: docker
#   services:
#     - docker:dind
#     - pycodestyle --ignore=E125 src/*.py
#   rules:
#     - if: $CI_PIPELINE != "schedule"
#   script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
#     - docker build -t $CI_REGISTRY_IMAGE .
#     - echo $CI_REGISTRY_IMAGE
#     - docker push $CI_REGISTRY_IMAGE
